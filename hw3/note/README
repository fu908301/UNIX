                          UNIX System Programming
                         Programming Assignment #3
                          "A Match Made in UNIX"

Due: Monday, May 2  at  11:59 pm.

Submission method: You will post to the course website. The TAs will post 
                   instructions on how to do this.

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one tar file named "<your student ID>.tar"

                  2. The contents of the tar file will be:
		     - One directory, named "<your student ID>.PA3".
		     - Three files, named "memgame," "displayboard" and
		       "getchoice".
		       These three files must be contained within the
		       "<your student ID>.PA3" directory.

                  3. Submissions made after the deadline will be ignored.
                     (That means, no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:20-2:20, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Assignment Summary:

Part 1. The Concept of the Assignment
"""""""""""""""""""""""""""""""""""""
You will implement a memory game that prompts the user to locate matching pairs
of letters. The implementation makes extensive use of tr and grep, two of our
recent course topics.

The program is also an interesting example because it involves multiple 
scripts. When a command within one script invokes a different script, then
the behavior is similar to a function call. Function calls can take arguments
and return an answer; and it is the same with these script invocations. The
arguments can be passed in as $1, $2, etc; and the return value can be passed
out by exit (and then captured by the caller as $?).


Part 2. Provided files.
"""""""""""""""""""""""
If you are reading this file, then you must have untarred the assigmnent.
Looking in the untarred directory, you will see:
% ls
demo  outputmem  README

The outputmem file is not really meant for you to read.  Instead, it is used
by the demo program.

The demo program is also not meant for you to read. But it is meant for you to
run. It is provided to you to show you how your program is expected to behave.
One of the reasons that I made a demo script is because your output will have
color (because of grep --color), and that color would not display if you were
using less to read this README file. So I instead made a demo.


Part 3. Details of the Game Play.
"""""""""""""""""""""""""""""""""
Run the demo script. Follow the instructions (i.e., keep hitting "enter").
After running the script, you should understand how the game is meant to work.
Without running the demo, you will not understand. So go run the demo. 

... What? Are you still here? Go run the demo, then come back.


Part 4. A Line By Line Description of the memgame Script
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Line 1: 
#!/usr/bin/tcsh     (or the equivalent on your system)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 2:
echo ABCDEFGHIJKLMNOPQRSTUVWX | __1__ | __2__ | __3__ letters | __4__ >>letters

The purpose of Line 2 is to create a file that lists all letters from A-X. But
it lists them twice -- once in upper-case and then once in lower case. And each
letter is on its own line. Moreover, each letter is preceded by a colon.
In other words the following command sequence would yield the output shown 
below (assuming that your Line 2 has correctly created the "letters" file):

% (head -3 letters; echo "..."; head -26 letters|tail -4; echo "..."; tail -3 \
letters )
:A
:B
:C
...
:W
:X
:a
:b
...
:v
:w
:x

To implement line 2, you will need to fill in the 4 numbered blanks shown 
above. Each of these blanks is a signle UNIX command That We Have Already 
Learned. These blanks will now be individually described:

 __1__: The input to this blank is, of course, "ABCDEFGHIJKLMNOPQRSTUVWX".

        The output of this blank is:
          1:A
          1:B
          1:C
           .
           .
           .
          1:V
          1:W
          1:X

        Q: How can we get this output?
        A: Use grep, with two flags that are listed on slide #85 of Lecture 6.
           (Yes, I know; slide 85 is for fgrep -- but grep has the same flags.)
           You will also need a regular expression that can find individual
           characters.

__2__: This command removes the numbers from the input stream.

__3__: This command is involved in making the letters each appear twice (recall
       that the above discussion of Line 2 has already said that the final
       output will have upper and lower case letters). Note also that I did not
       say that this command finishes the task, just that it starts it.

       What this command does is to send the input stream to a file (in this
       case, the file is "letters") while also passing the input stream onward
       to the output stream.

__4__: This command makes the input stream lower case.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 3: 
sort -R letters | __1__ > memboard

The first part of this line is given to you. The sort -R flag is not one that I
require you to learn, but it is useful for games, because it randomly shuffles
the lines of the file. 

(Actually, to be technical it sorts according to a randomized key. What this 
means is that duplicated lines within the file will always get sorted next to
each other -- so, not entirely random. In fact, this feature was the reason why
line 2 needed to make the second half of the letters file be lower-case -- the
lower case letters don't get sorted next to the upper case ones. In
other words:
    % cat file         % sort -R file     % sort -R file     % sort -R file
    a                  b                  a                  b
    a                  A                  a                  a
    A                  A                  B                  a
    A                  a                  A                  A
    b                  a                  A                  A
    B                  B                  b                  B

etc. )

Now, to describe the blank indicated in line 3:
__1__: This command capitalizes (i.e., makes upper-case) the input stream. It
       also turns newlines into commas and colons into spaces.

       If you didn't get the idea clearly, an example might help to explain the
       format. Of course it is random, but it is possible to get this answer:
       % cat memboard
        W, W, C, G, T, Q, N, P, O, L, E, N, U, V, K, M, B, M, K, A, H, U, X, J, S, J, L, F, R, I, X, P, A, F, Q, I, S, B, V, G, E, R, O, D, C, D, T, H,
       %

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Lines 4-6: Here you initialize 3 variables to 0. Two of these variables will
           hold integers that represent a board position. Since there are 48
           positions on the board, the values will range from 1 to 48. But we
           initialize to 0 specifically because this is NOT in the range (which
           allows us to indicate that the choice has not been made).
           The other variable is the counter of the number of moves taken (so,
           obviously, it should be initialized to 0).

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 7: The beginning of an infinite while loop.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 8 
./displayboard __1__ __2__ __3__
The first two blanks are the board position variables. 
The third blank is the first argument to the memgame script.
   Note: The only logically reasonable argument is "-c". But you don't need to
         validate the argument. It will either be nothing or "-c"
   Note also: The shell does not crash if you access $1 but there is no $1. 
              Instead, it just yields nothing (i.e., the empty string "").
   Note also also: The -c flag is passed into displayboard because that script
                    will USE it. Now, it just-so-happens that the way that it
                    uses it is going to be in an if statement. And that means
                    that the concern described in Lecture 5 Slides 70-75.
                    Now, we could solve that problem at the if condition (as
                    slide 75 indicates). But, instead we will deal with the
                    problem here, at the place where we pass the flag (but the
                    solution of adding a character at the front of the argument
                    is still the solution, just we do it here). So, if there is
                    no $1 then the third argument passed to displayboard will
                    just be the added character.
                    

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 9 

This line begins an if clause. The conditional expression tests for whether the
displayboard script has returned a value that indicates that a match was found.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 10

To reach line 10, we must have passed the test on line 9. And that means that
the displayboard script has determined that we have found a match.
Now we have not yet seen the displayboard script, but let me just tell you now
that line 11 of that script is going to create a file, and the first line of
that file will contain the letter that is the current match. For example, if I
typed "head -1" on that file, and the output contained the letter "Q", then I 
would know that Q had been matched. (The output also contains some other junk,
but we know that it will only contain one letter.)

The job of line 10 is to take the meboard file and to replace each instance of
that letter with a "_". 

The format is:
    cat memboard | tr __1__ > __2__

Here, __1__ uses a combination of ``, head and tr. It performs the replacement.
__2__ is the name of a new temporary file. (We can't just send the answer back
to memboard directly because it does not work right when the same file is used
for both input and output.)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 11

This line overwrites the memboard file with the temporary file created on line
10. See the previous paragraph for an explanation of why we needed to do it
this way.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 12

The purpose of this line is to determine if the game has been won. Since a
match has been removed, then it is possible that there are no more letters in
the memboard file.

The format of Line 12 is:
    grep __1__ && echo __2__ && exit

Not, if your computer can't do "echo a\\nb" correctly, then you can do the same
effect with "echo a && echo b".

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Lines 13 & 14:
  endif
  ./getchoice 0

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 15
This line uses the value returned from getchoice to set the value of one of
the variables that you initialized on lines 4-6.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 16
  ./displayboard __1__ 0 __3__

Remember how line 8 ran this same script? Well these arguments are the same as
back on that line, except that __2__ has been replaced with the value of 0. 
(The reason that we do this is that the second choice has not been made yet, so
only one letter should be displayed.)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 17
This line is like line 14, except that the argument is not 0, but is instead
the variable defined on line 15. (The reason that the getchoice script needs
to know about the first choice is so that it can verify that the user does not
try to match the same position with itself.)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 18
This line is like line 15, but it store the answer to the 2nd choice variable.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 19
This line increments the counter of how many moves have been tried. 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 20
end


Part 5. A Line By Line Description of the displayboard Script
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
I will add a description of this in a later posting of the homework assignment.
But I wanted to give you something to get started with.


Part 6. A Line By Line Description of the getchoice Script
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
I will add a description of this in a later posting of the homework assignment.
